const t='{"documentCount":8,"nextId":8,"documentIds":{"0":"/article/y4dnj316/","1":"/article/y4dnj316/#前言","2":"/article/y4dnj316/#封装通信逻辑","3":"/article/y4dnj316/#框架封装","4":"/article/y4dnj316/#示例代码","5":"/article/y4dnj316/#性能优化","6":"/article/y4dnj316/#安全考虑","7":"/article/y4dnj316/#结论"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[7,1,17],"1":[1,7,34],"2":[1,7,1],"3":[1,7,1],"4":[1,7,1],"5":[1,7,1],"6":[1,7,1],"7":[1,7,1]},"averageFieldLength":[1.75,6.25,7.125],"storedFields":{"0":{"title":"【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信","titles":[]},"1":{"title":"前言","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"2":{"title":"封装通信逻辑","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"3":{"title":"框架封装","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"4":{"title":"示例代码","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"5":{"title":"性能优化","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"6":{"title":"安全考虑","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]},"7":{"title":"结论","titles":["【Framework】基于 Electron Protocol API 实现渲染进程与主进程通信"]}},"dirtCount":0,"index":[["结论",{"0":{"7":1}}],["安全考虑",{"0":{"6":1}}],["性能优化",{"0":{"5":1}}],["示例代码",{"0":{"4":1}}],["框架封装",{"0":{"3":1}}],["封装通信逻辑",{"0":{"2":1}}],["应用页面进行云端部署提供了便利",{"2":{"1":1}}],["应用程序中",{"2":{"1":1}}],["也为将来",{"2":{"1":1}}],["也能支持跨设备通信",{"2":{"1":1}}],["也能通过网络进行通信",{"2":{"1":1}}],["主进程只需要处理网络请求和响应即可",{"2":{"1":1}}],["渲染进程可以大量复用已有解决方案",{"2":{"1":1}}],["渲染进程和主进程之间的通信是一个常见的需求",{"2":{"1":1}}],["将会大大简化开发过程",{"2":{"1":1}}],["将渲染进程和主进程的通信进行封装",{"2":{"1":1}}],["使其既能支持本地通信",{"2":{"1":1}}],["使其既能在本地进程间通信",{"2":{"1":1}}],["但如果能直接利用",{"2":{"1":1}}],["虽然可以通过框架的封装实现业务逻辑分层",{"2":{"1":1}}],["的方式就显得不太适用了",{"2":{"1":1}}],["那么",{"2":{"1":1}}],["这时候就需要考虑如何封装这些通信逻辑",{"2":{"1":1}}],["或者说跨设备通信",{"2":{"1":1}}],["假如我想实现多台电脑之间的通信",{"2":{"1":1}}],["而",{"2":{"1":1}}],["模块用于处理渲染进程的消息",{"2":{"1":1}}],["模块用于处理主进程的消息",{"2":{"1":1}}],["模块来实现这一点",{"2":{"1":1}}],["一方面",{"2":{"1":1}}],["ipcrenderer",{"2":{"1":2}}],["ipcmain",{"2":{"1":3}}],["和",{"2":{"1":1}}],["在",{"2":{"1":1}}],["前言",{"0":{"1":1}}],["对于跨设备通信也非常有帮助",{"2":{"0":1}}],["协议",{"2":{"0":1}}],["2",{"2":{"0":1}}],["http",{"2":{"0":1}}],["可以一套代码兼容",{"2":{"0":1}}],["与此同时",{"2":{"0":1}}],["提供的",{"2":{"1":1}}],["提供的用于在渲染进程和主进程之间进行通信的机制",{"2":{"0":1}}],["提供了",{"2":{"1":1}}],["提高代码的可维护性和可读性",{"2":{"0":1}}],["我们可以简化通信过程",{"2":{"0":1}}],["通过合适的封装",{"2":{"0":1}}],["并处理这些消息以实现复杂的交互功能",{"2":{"0":1}}],["它允许我们发送异步和同步消息",{"2":{"0":1}}],["是",{"2":{"0":1}}],["实现渲染进程与主进程通信",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1}}],["api",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"2":{"0":1,"1":1}}],["protocol",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"2":{"0":1,"1":1}}],["electron",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1},"2":{"0":1,"1":4}}],["基于",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1}}],["framework",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1}}]],"serializationVersion":2}';export{t as default};
